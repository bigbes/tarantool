env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd("push filter ".."'\\.lua.*:[0-9]+: ' to '.lua...\"]:<line>: '")
---
- true
...
engine = test_run:get_cfg('engine')
---
...
box.execute('pragma sql_default_engine=\''..engine..'\'')
---
- row_count: 0
...
--
-- gh-3272: Move SQL CHECK into server
--
-- Until Tarantool version 2.2 check constraints were stored in
-- space opts.
-- Make sure that now this legacy option is ignored.
opts = {checks = {{expr = 'X>5'}}}
---
...
format = {{name = 'X', type = 'unsigned'}}
---
...
t = {513, 1, 'test', 'memtx', 0, opts, format}
---
...
s = box.space._space:insert(t)
---
...
_ = box.space.test:create_index('pk')
---
...
-- Invalid expression test.
box.space._ck_constraint:insert({513, 'CK_CONSTRAINT_01', false, 'SQL', 'X><5'})
---
- error: 'Failed to create check constraint ''CK_CONSTRAINT_01'': Syntax error near
    ''<'''
...
-- Unexistent space test.
box.space._ck_constraint:insert({550, 'CK_CONSTRAINT_01', false, 'SQL', 'X<5'})
---
- error: Space '550' does not exist
...
-- Pass integer instead of expression.
box.space._ck_constraint:insert({513, 'CK_CONSTRAINT_01', false, 'SQL', 666})
---
- error: 'Tuple field 5 type does not match one required by operation: expected string'
...
-- Defered CK constraints are not supported.
box.space._ck_constraint:insert({513, 'CK_CONSTRAINT_01', true, 'SQL', 'X<5'})
---
- error: Tarantool does not support deferred ck constraints
...
-- The only supperted language is SQL.
box.space._ck_constraint:insert({513, 'CK_CONSTRAINT_01', false, 'LUA', 'X<5'})
---
- error: Unsupported language 'LUA' specified for function 'CK_CONSTRAINT_01'
...
-- Check constraints LUA creation test.
box.space._ck_constraint:insert({513, 'CK_CONSTRAINT_01', false, 'SQL', 'X<5'})
---
- [513, 'CK_CONSTRAINT_01', false, 'SQL', 'X<5']
...
box.space._ck_constraint:count({})
---
- 1
...
box.execute("INSERT INTO \"test\" VALUES(5);")
---
- error: 'Failed to execute SQL statement: CHECK constraint failed: CK_CONSTRAINT_01'
...
box.space._ck_constraint:replace({513, 'CK_CONSTRAINT_01', false, 'SQL', 'X<=5'})
---
- [513, 'CK_CONSTRAINT_01', false, 'SQL', 'X<=5']
...
box.execute("INSERT INTO \"test\" VALUES(5);")
---
- row_count: 1
...
box.execute("INSERT INTO \"test\" VALUES(6);")
---
- error: 'Failed to execute SQL statement: CHECK constraint failed: CK_CONSTRAINT_01'
...
-- Can't drop table with check constraints.
box.space.test:delete({5})
---
- [5]
...
box.space.test.index.pk:drop()
---
...
box.space._space:delete({513})
---
- error: 'Can''t drop space ''test'': the space has check constraints'
...
box.space._ck_constraint:delete({513, 'CK_CONSTRAINT_01'})
---
- [513, 'CK_CONSTRAINT_01', false, 'SQL', 'X<=5']
...
box.space._space:delete({513})
---
- [513, 1, 'test', 'memtx', 0, {'checks': [{'expr': 'X>5'}]}, [{'name': 'X', 'type': 'unsigned'}]]
...
-- Create table with checks in sql.
box.execute("CREATE TABLE t1(x INTEGER CONSTRAINT ONE CHECK( x<5 ), y REAL CONSTRAINT TWO CHECK( y>x ), z INTEGER PRIMARY KEY);")
---
- row_count: 1
...
box.space._ck_constraint:count()
---
- 2
...
box.execute("INSERT INTO t1 VALUES (7, 1, 1)")
---
- error: 'Failed to execute SQL statement: CHECK constraint failed: ONE'
...
box.execute("INSERT INTO t1 VALUES (2, 1, 1)")
---
- error: 'Failed to execute SQL statement: CHECK constraint failed: TWO'
...
box.execute("INSERT INTO t1 VALUES (2, 4, 1)")
---
- row_count: 1
...
box.execute("DROP TABLE t1")
---
- row_count: 1
...
-- Test space creation rollback on spell error in ck constraint.
box.execute("CREATE TABLE first (id FLOAT PRIMARY KEY CHECK(id < 5), a INT CONSTRAINT ONE CHECK(a >< 5));")
---
- error: Syntax error near '<'
...
box.space.FIRST == nil
---
- true
...
box.space._ck_constraint:count() == 0
---
- true
...
-- Ck constraints are disallowed for spaces having no format.
s = box.schema.create_space('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
_ = box.space._ck_constraint:insert({s.id, 'physics', false, 'SQL', 'X<Y'})
---
- error: Tarantool does not support CK constraint for space without format
...
s:format({{name='X', type='integer'}, {name='Y', type='integer'}})
---
...
_ = box.space._ck_constraint:insert({s.id, 'physics', false, 'SQL', 'X<Y'})
---
...
box.execute("INSERT INTO \"test\" VALUES(2, 1);")
---
- error: 'Failed to execute SQL statement: CHECK constraint failed: physics'
...
s:format({{name='Y', type='integer'}, {name='X', type='integer'}})
---
...
box.execute("INSERT INTO \"test\" VALUES(1, 2);")
---
- error: 'Failed to execute SQL statement: CHECK constraint failed: physics'
...
box.execute("INSERT INTO \"test\" VALUES(2, 1);")
---
- row_count: 1
...
s:truncate()
---
...
box.execute("INSERT INTO \"test\" VALUES(1, 2);")
---
- error: 'Failed to execute SQL statement: CHECK constraint failed: physics'
...
s:format({})
---
- error: Tarantool does not support CK constraint for space without format
...
s:format()
---
- [{'name': 'Y', 'type': 'integer'}, {'name': 'X', 'type': 'integer'}]
...
s:format({{name='Y1', type='integer'}, {name='X1', type='integer'}})
---
- error: 'Failed to create check constraint ''physics'': Canâ€™t resolve field ''X'''
...
-- Ck constraint creation is forbidden for non-empty space
s:insert({2, 1})
---
- [2, 1]
...
_ = box.space._ck_constraint:insert({s.id, 'conflict', false, 'SQL', 'X>10'})
---
- error: 'Failed to create check constraint ''conflict'': referencing space must be
    empty'
...
s:truncate()
---
...
_ = box.space._ck_constraint:insert({s.id, 'conflict', false, 'SQL', 'X>10'})
---
...
box.execute("INSERT INTO \"test\" VALUES(1, 2);")
---
- error: 'Failed to execute SQL statement: CHECK constraint failed: conflict'
...
box.execute("INSERT INTO \"test\" VALUES(11, 11);")
---
- error: 'Failed to execute SQL statement: CHECK constraint failed: physics'
...
box.execute("INSERT INTO \"test\" VALUES(12, 11);")
---
- row_count: 1
...
s:drop()
---
...
box.execute("CREATE TABLE T2(ID INT PRIMARY KEY, CONSTRAINT CK1 CHECK(ID > 0), CONSTRAINT CK1 CHECK(ID < 0))")
---
- error: Duplicate key exists in unique index 'primary' in space '_ck_constraint'
...
box.space._ck_constraint:select()
---
- []
...
--
-- gh-3611: Segfault on table creation with check referencing this table
--
box.execute("CREATE TABLE w2 (s1 INT PRIMARY KEY, CHECK ((SELECT COUNT(*) FROM w2) = 0));")
---
- error: 'Failed to create check constraint ''CK_CONSTRAINT_1_W2'': Subqueries are
    prohibited in a ck constraint definition'
...
box.execute("DROP TABLE w2;")
---
- error: Space 'W2' does not exist
...
--
-- gh-3653: Dissallow bindings for DDL
--
box.execute("CREATE TABLE t5(x INT PRIMARY KEY, y INT, CHECK( x*y < ? ));")
---
- error: 'Failed to create check constraint ''CK_CONSTRAINT_1_T5'': bindings are not
    allowed in DDL'
...
test_run:cmd("clear filter")
---
- true
...
